{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "nodejs-hw-mongodb",
    "license": {
      "name": "Apache 2.0",
      "url": "<http://www.apache.org/licenses/LICENSE-2.0.html>"
    },
    "description": "The app allows users to register, log in, add, edit, delete and view contacts. The application also supports integration with Google OAuth for user authorization.\n"
  },
  "servers": [
    {
      "url": "https://nodejs-hw-mongodb-7-mvg7.onrender.com"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Operations with users (registration, login, exit, etc.)"
    },
    {
      "name": "Contacts",
      "description": "Operations with contacts (adding, editing, deleting, viewing)"
    }
  ],
  "paths": {
    "/contacts/{id}": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get contact by id",
        "operationId": "getContact",
        "description": "Get contact by id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "666adc35c46ac7862773cd28"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found contact by id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found contact with id 666adc35c46ac7862773cd28!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/contact"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "patch": {
        "tags": [
          "Contacts"
        ],
        "summary": "Update contact by id",
        "operationId": "patchContact",
        "description": "Update contact by id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "666adc35c46ac7862773cd28"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully patched a contact!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully patched a contact!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/contact"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      },
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Delete contact by Id",
        "operationId": "deleteContact",
        "description": "Delete contact by Id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string",
              "example": "666adc35c46ac7862773cd28"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully contact deleted"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    },
    "/contacts": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get all contacts",
        "operationId": "getAllContacts",
        "description": "Get all contacts",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "number",
              "example": 1
            }
          },
          {
            "in": "query",
            "name": "perPage",
            "schema": {
              "type": "number",
              "example": 5
            }
          },
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "example": "_id"
            }
          },
          {
            "in": "query",
            "name": "sortOrder",
            "schema": {
              "type": "string",
              "enum": [
                "asc, desc"
              ],
              "example": "asc"
            }
          },
          {
            "in": "query",
            "name": "totalItems",
            "schema": {
              "type": "number",
              "example": 10
            }
          },
          {
            "in": "query",
            "name": "totalPages",
            "schema": {
              "type": "number",
              "example": 8
            }
          },
          {
            "in": "query",
            "name": "hasNextPage",
            "schema": {
              "type": "boolean",
              "example": true
            }
          },
          {
            "in": "query",
            "name": "hasPreviousPage",
            "schema": {
              "type": "boolean",
              "example": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully found contacts!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully found contacts!"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/contact"
                      }
                    },
                    "page": {
                      "type": "number",
                      "example": 1
                    },
                    "perPage": {
                      "type": "number",
                      "example": 5
                    },
                    "totalItems": {
                      "type": "number",
                      "example": 10
                    },
                    "totalPages": {
                      "type": "number",
                      "example": 8
                    },
                    "hasNextPage": {
                      "type": "boolean",
                      "example": true
                    },
                    "hasPreviousPage": {
                      "type": "boolean",
                      "example": false
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Create contact",
        "operationId": "createContact",
        "description": "Create a contact with payload",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "name",
                  "phoneNumber",
                  "email",
                  "isFavorite",
                  "contactType"
                ],
                "properties": {
                  "name": {
                    "description": "contact's name",
                    "type": "string",
                    "example": "John Doe"
                  },
                  "phoneNumber": {
                    "description": "contact's phone number",
                    "type": "number",
                    "example": 380123456789
                  },
                  "email": {
                    "description": "contact's email",
                    "type": "string",
                    "example": "j9s2j@example.com"
                  },
                  "isFavorite": {
                    "description": "contact is favorite",
                    "type": "boolean",
                    "example": true
                  },
                  "contactType": {
                    "description": "contact type",
                    "type": "string",
                    "enum": [
                      "work",
                      "personal",
                      "home"
                    ],
                    "example": "personal"
                  },
                  "photo": {
                    "description": "contact''s photo",
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Creates a contact",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully created a contact!"
                    },
                    "data": {
                      "type": "object",
                      "$ref": "#/components/schemas/contact"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "contact": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "phoneNumber",
          "email",
          "isFavourite",
          "contactType"
        ],
        "properties": {
          "_id": {
            "description": "Contact's id",
            "type": "string",
            "example": "65e4decdd286b30065d54af9"
          },
          "name": {
            "description": "Contact's name",
            "type": "string",
            "example": "John Doe"
          },
          "phoneNumber": {
            "description": "Contact's phone number",
            "type": "number",
            "example": 380123456789
          },
          "contactType": {
            "description": "Contact's type",
            "type": "string",
            "enum": [
              "work",
              "personal",
              "home"
            ]
          },
          "email": {
            "description": "Contact's email",
            "type": "string",
            "example": "5C9Zw@example.com"
          },
          "isFavourite": {
            "description": "Contact is favourite",
            "type": "boolean",
            "example": false
          },
          "photo": {
            "description": "Link to Contact's photo",
            "type": "string",
            "example": "<https://res.cloudinary.com/dh6h5bqnx/image/upload/v1719597092/cctnl1rniapmfrc4tdsh.jpg>"
          }
        }
      }
    },
    "responses": {
      "401": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Access token expired"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Contact not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "Contact not found"
                },
                "data": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    }
  }
}